// Code generated by ogen, DO NOT EDIT.

package message

type ApiKeyAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *ApiKeyAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *ApiKeyAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *ApiKeyAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *ApiKeyAuth) SetRoles(val []string) {
	s.Roles = val
}

type DeleteMessageBadRequest Error

func (*DeleteMessageBadRequest) deleteMessageRes() {}

type DeleteMessageInternalServerError Error

func (*DeleteMessageInternalServerError) deleteMessageRes() {}

type DeleteMessageNotFound Error

func (*DeleteMessageNotFound) deleteMessageRes() {}

type DeleteMessageOK struct {
	Result string `json:"result"`
}

// GetResult returns the value of Result.
func (s *DeleteMessageOK) GetResult() string {
	return s.Result
}

// SetResult sets the value of Result.
func (s *DeleteMessageOK) SetResult(val string) {
	s.Result = val
}

func (*DeleteMessageOK) deleteMessageRes() {}

type DeleteMessageUnauthorized Error

func (*DeleteMessageUnauthorized) deleteMessageRes() {}

// Error content.
// Ref: #/components/schemas/Error
type Error struct {
	Code    OptInt64  `json:"code"`
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptInt64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptInt64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val OptString) {
	s.Message = val
}

type ExtendMessageTimeoutBadRequest Error

func (*ExtendMessageTimeoutBadRequest) extendMessageTimeoutRes() {}

type ExtendMessageTimeoutInternalServerError Error

func (*ExtendMessageTimeoutInternalServerError) extendMessageTimeoutRes() {}

type ExtendMessageTimeoutNotFound Error

func (*ExtendMessageTimeoutNotFound) extendMessageTimeoutRes() {}

type ExtendMessageTimeoutOK struct {
	Result  string  `json:"result"`
	Message Message `json:"message"`
}

// GetResult returns the value of Result.
func (s *ExtendMessageTimeoutOK) GetResult() string {
	return s.Result
}

// GetMessage returns the value of Message.
func (s *ExtendMessageTimeoutOK) GetMessage() Message {
	return s.Message
}

// SetResult sets the value of Result.
func (s *ExtendMessageTimeoutOK) SetResult(val string) {
	s.Result = val
}

// SetMessage sets the value of Message.
func (s *ExtendMessageTimeoutOK) SetMessage(val Message) {
	s.Message = val
}

func (*ExtendMessageTimeoutOK) extendMessageTimeoutRes() {}

type ExtendMessageTimeoutUnauthorized Error

func (*ExtendMessageTimeoutUnauthorized) extendMessageTimeoutRes() {}

// Merged schema.
// Ref: #/components/schemas/Message
type Message struct {
	ID MessageId `json:"id"`
	// メッセージ本文.
	Content MessageContent `json:"content"`
	// 登録時刻 (Epochからのミリ秒).
	CreatedAt int64 `json:"created_at"`
	// 更新時刻 (Epochからのミリ秒).
	UpdatedAt int64 `json:"updated_at"`
	// 未処理メッセージ保存期間が過ぎる時点 (Epochからのミリ秒).
	ExpiresAt int64 `json:"expires_at"`
	// 最新のメッセージ取得時刻 (Epochからのミリ秒).
	AcquiredAt int64 `json:"acquired_at"`
	// 可視性タイムアウトする時点 (Epochからのミリ秒).
	VisibilityTimeoutAt int64 `json:"visibility_timeout_at"`
}

// GetID returns the value of ID.
func (s *Message) GetID() MessageId {
	return s.ID
}

// GetContent returns the value of Content.
func (s *Message) GetContent() MessageContent {
	return s.Content
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Message) GetCreatedAt() int64 {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Message) GetUpdatedAt() int64 {
	return s.UpdatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *Message) GetExpiresAt() int64 {
	return s.ExpiresAt
}

// GetAcquiredAt returns the value of AcquiredAt.
func (s *Message) GetAcquiredAt() int64 {
	return s.AcquiredAt
}

// GetVisibilityTimeoutAt returns the value of VisibilityTimeoutAt.
func (s *Message) GetVisibilityTimeoutAt() int64 {
	return s.VisibilityTimeoutAt
}

// SetID sets the value of ID.
func (s *Message) SetID(val MessageId) {
	s.ID = val
}

// SetContent sets the value of Content.
func (s *Message) SetContent(val MessageContent) {
	s.Content = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Message) SetCreatedAt(val int64) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Message) SetUpdatedAt(val int64) {
	s.UpdatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *Message) SetExpiresAt(val int64) {
	s.ExpiresAt = val
}

// SetAcquiredAt sets the value of AcquiredAt.
func (s *Message) SetAcquiredAt(val int64) {
	s.AcquiredAt = val
}

// SetVisibilityTimeoutAt sets the value of VisibilityTimeoutAt.
func (s *Message) SetVisibilityTimeoutAt(val int64) {
	s.VisibilityTimeoutAt = val
}

type MessageContent string

type MessageId string

// Ref: #/components/schemas/NewMessage
type NewMessage struct {
	ID MessageId `json:"id"`
	// メッセージ本文.
	Content MessageContent `json:"content"`
	// 登録時刻 (Epochからのミリ秒).
	CreatedAt int64 `json:"created_at"`
	// 更新時刻 (Epochからのミリ秒).
	UpdatedAt int64 `json:"updated_at"`
	// 未処理メッセージ保存期間が過ぎる時点 (Epochからのミリ秒).
	ExpiresAt int64 `json:"expires_at"`
}

// GetID returns the value of ID.
func (s *NewMessage) GetID() MessageId {
	return s.ID
}

// GetContent returns the value of Content.
func (s *NewMessage) GetContent() MessageContent {
	return s.Content
}

// GetCreatedAt returns the value of CreatedAt.
func (s *NewMessage) GetCreatedAt() int64 {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *NewMessage) GetUpdatedAt() int64 {
	return s.UpdatedAt
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *NewMessage) GetExpiresAt() int64 {
	return s.ExpiresAt
}

// SetID sets the value of ID.
func (s *NewMessage) SetID(val MessageId) {
	s.ID = val
}

// SetContent sets the value of Content.
func (s *NewMessage) SetContent(val MessageContent) {
	s.Content = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *NewMessage) SetCreatedAt(val int64) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *NewMessage) SetUpdatedAt(val int64) {
	s.UpdatedAt = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *NewMessage) SetExpiresAt(val int64) {
	s.ExpiresAt = val
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type QueueName string

type ReceiveMessageBadRequest Error

func (*ReceiveMessageBadRequest) receiveMessageRes() {}

type ReceiveMessageInternalServerError Error

func (*ReceiveMessageInternalServerError) receiveMessageRes() {}

type ReceiveMessageOK struct {
	Result   string    `json:"result"`
	Messages []Message `json:"messages"`
}

// GetResult returns the value of Result.
func (s *ReceiveMessageOK) GetResult() string {
	return s.Result
}

// GetMessages returns the value of Messages.
func (s *ReceiveMessageOK) GetMessages() []Message {
	return s.Messages
}

// SetResult sets the value of Result.
func (s *ReceiveMessageOK) SetResult(val string) {
	s.Result = val
}

// SetMessages sets the value of Messages.
func (s *ReceiveMessageOK) SetMessages(val []Message) {
	s.Messages = val
}

func (*ReceiveMessageOK) receiveMessageRes() {}

type ReceiveMessageUnauthorized Error

func (*ReceiveMessageUnauthorized) receiveMessageRes() {}

type SendMessageBadRequest Error

func (*SendMessageBadRequest) sendMessageRes() {}

type SendMessageInternalServerError Error

func (*SendMessageInternalServerError) sendMessageRes() {}

type SendMessageOK struct {
	Result  string     `json:"result"`
	Message NewMessage `json:"message"`
}

// GetResult returns the value of Result.
func (s *SendMessageOK) GetResult() string {
	return s.Result
}

// GetMessage returns the value of Message.
func (s *SendMessageOK) GetMessage() NewMessage {
	return s.Message
}

// SetResult sets the value of Result.
func (s *SendMessageOK) SetResult(val string) {
	s.Result = val
}

// SetMessage sets the value of Message.
func (s *SendMessageOK) SetMessage(val NewMessage) {
	s.Message = val
}

func (*SendMessageOK) sendMessageRes() {}

type SendMessageUnauthorized Error

func (*SendMessageUnauthorized) sendMessageRes() {}

// Ref: #/components/schemas/SendRequest
type SendRequest struct {
	Content MessageContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *SendRequest) GetContent() MessageContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *SendRequest) SetContent(val MessageContent) {
	s.Content = val
}
